# generated by datamodel-codegen:
#   filename:  data.json
#   timestamp: 2024-02-09T23:18:59+00:00

from __future__ import annotations

from typing import Any, List, Optional

from discord import Color, Embed
from discord.ext.commands import Context
from pydantic import BaseModel


class BioLink(BaseModel):
    title: Optional[str] = None
    lynx_url: Optional[str] = None
    url: Optional[str] = None
    link_type: Optional[str] = None


class BiographyWithEntities(BaseModel):
    raw_text: Optional[str] = None
    entities: Optional[List] = None


class EdgeFollowedBy(BaseModel):
    count: Optional[int] = None


class EdgeFollow(BaseModel):
    count: Optional[int] = None


class EdgeMutualFollowedBy(BaseModel):
    count: Optional[int] = None
    edges: Optional[List] = None


class PageInfo(BaseModel):
    has_next_page: Optional[bool] = None
    end_cursor: Optional[str] = None


class Dimensions(BaseModel):
    height: Optional[int] = None
    width: Optional[int] = None


class User1(BaseModel):
    full_name: Optional[str] = None
    followed_by_viewer: Optional[bool] = None
    id: Optional[str] = None
    is_verified: Optional[bool] = None
    profile_pic_url: Optional[str] = None
    username: Optional[str] = None


class Node1(BaseModel):
    user: Optional[User1] = None
    x: Optional[float] = None
    y: Optional[float] = None


class Edge1(BaseModel):
    node: Optional[Node1] = None


class EdgeMediaToTaggedUser(BaseModel):
    edges: Optional[List[Edge1]] = None


class SharingFrictionInfo(BaseModel):
    should_have_sharing_friction: Optional[bool] = None
    bloks_app_url: Optional[Any] = None


class Owner(BaseModel):
    id: Optional[str] = None
    username: Optional[str] = None


class DashInfo(BaseModel):
    is_dash_eligible: Optional[bool] = None
    video_dash_manifest: Optional[Any] = None
    number_of_qualities: Optional[int] = None


class Node2(BaseModel):
    text: Optional[str] = None


class Edge2(BaseModel):
    node: Optional[Node2] = None


class EdgeMediaToCaption(BaseModel):
    edges: Optional[List[Edge2]] = None


class EdgeMediaToComment(BaseModel):
    count: Optional[int] = None


class EdgeLikedBy(BaseModel):
    count: Optional[int] = None


class EdgeMediaPreviewLike(BaseModel):
    count: Optional[int] = None


class ThumbnailResource(BaseModel):
    src: Optional[str] = None
    config_width: Optional[int] = None
    config_height: Optional[int] = None


class CoauthorProducer(BaseModel):
    id: Optional[str] = None
    is_verified: Optional[bool] = None
    profile_pic_url: Optional[str] = None
    username: Optional[str] = None


class Node(BaseModel):
    __typename: Optional[str] = None
    id: Optional[str] = None
    shortcode: Optional[str] = None
    dimensions: Optional[Dimensions] = None
    display_url: Optional[str] = None
    edge_media_to_tagged_user: Optional[EdgeMediaToTaggedUser] = None
    fact_check_overall_rating: Optional[Any] = None
    fact_check_information: Optional[Any] = None
    gating_info: Optional[Any] = None
    sharing_friction_info: Optional[SharingFrictionInfo] = None
    media_overlay_info: Optional[Any] = None
    media_preview: Optional[Optional[str]] = None
    owner: Optional[Owner] = None
    is_video: Optional[bool] = None
    has_upcoming_event: Optional[bool] = None
    accessibility_caption: Optional[Any] = None
    dash_info: Optional[DashInfo] = None
    has_audio: Optional[bool] = None
    tracking_token: Optional[str] = None
    video_url: Optional[str] = None
    video_view_count: Optional[int] = None
    edge_media_to_caption: Optional[EdgeMediaToCaption] = None
    edge_media_to_comment: Optional[EdgeMediaToComment] = None
    comments_disabled: Optional[bool] = None
    taken_at_timestamp: Optional[int] = None
    edge_liked_by: Optional[EdgeLikedBy] = None
    edge_media_preview_like: Optional[EdgeMediaPreviewLike] = None
    location: Optional[Any] = None
    nft_asset_info: Optional[Any] = None
    thumbnail_src: Optional[str] = None
    thumbnail_resources: Optional[List[ThumbnailResource]] = None
    felix_profile_grid_crop: Optional[Any] = None
    coauthor_producers: Optional[List[CoauthorProducer]] = None
    pinned_for_users: Optional[List] = None
    viewer_can_reshare: Optional[bool] = None
    encoding_status: Optional[Any] = None
    is_published: Optional[bool] = None
    product_type: Optional[str] = None
    title: Optional[str] = None
    video_duration: Optional[float] = None


class Edge(BaseModel):
    node: Optional[Node] = None


class EdgeFelixVideoTimeline(BaseModel):
    count: Optional[int] = None
    page_info: Optional[PageInfo] = None
    edges: Optional[List[Edge]] = None


class PageInfo1(BaseModel):
    has_next_page: Optional[bool] = None
    end_cursor: Optional[str] = None


class Dimensions1(BaseModel):
    height: Optional[int] = None
    width: Optional[int] = None


class User2(BaseModel):
    full_name: Optional[str] = None
    followed_by_viewer: Optional[bool] = None
    id: Optional[str] = None
    is_verified: Optional[bool] = None
    profile_pic_url: Optional[str] = None
    username: Optional[str] = None


class Node4(BaseModel):
    user: Optional[User2] = None
    x: Optional[float] = None
    y: Optional[float] = None


class Edge4(BaseModel):
    node: Optional[Node4] = None


class EdgeMediaToTaggedUser1(BaseModel):
    edges: Optional[List[Edge4]] = None


class SharingFrictionInfo1(BaseModel):
    should_have_sharing_friction: Optional[bool] = None
    bloks_app_url: Optional[Any] = None


class Owner1(BaseModel):
    id: Optional[str] = None
    username: Optional[str] = None


class Node5(BaseModel):
    text: Optional[str] = None


class Edge5(BaseModel):
    node: Optional[Node5] = None


class EdgeMediaToCaption1(BaseModel):
    edges: Optional[List[Edge5]] = None


class EdgeMediaToComment1(BaseModel):
    count: Optional[int] = None


class EdgeLikedBy1(BaseModel):
    count: Optional[int] = None


class EdgeMediaPreviewLike1(BaseModel):
    count: Optional[int] = None


class ThumbnailResource1(BaseModel):
    src: Optional[str] = None
    config_width: Optional[int] = None
    config_height: Optional[int] = None


class CoauthorProducer1(BaseModel):
    id: Optional[str] = None
    is_verified: Optional[bool] = None
    profile_pic_url: Optional[str] = None
    username: Optional[str] = None


class Dimensions2(BaseModel):
    height: Optional[int] = None
    width: Optional[int] = None


class User3(BaseModel):
    full_name: Optional[str] = None
    followed_by_viewer: Optional[bool] = None
    id: Optional[str] = None
    is_verified: Optional[bool] = None
    profile_pic_url: Optional[str] = None
    username: Optional[str] = None


class Node7(BaseModel):
    user: Optional[User3] = None
    x: Optional[float] = None
    y: Optional[float] = None


class Edge7(BaseModel):
    node: Optional[Node7] = None


class EdgeMediaToTaggedUser2(BaseModel):
    edges: Optional[List[Edge7]] = None


class SharingFrictionInfo2(BaseModel):
    should_have_sharing_friction: Optional[bool] = None
    bloks_app_url: Optional[Any] = None


class Owner2(BaseModel):
    id: Optional[str] = None
    username: Optional[str] = None


class Node6(BaseModel):
    __typename: Optional[str] = None
    id: Optional[str] = None
    shortcode: Optional[str] = None
    dimensions: Optional[Dimensions2] = None
    display_url: Optional[str] = None
    edge_media_to_tagged_user: Optional[EdgeMediaToTaggedUser2] = None
    fact_check_overall_rating: Optional[Any] = None
    fact_check_information: Optional[Any] = None
    gating_info: Optional[Any] = None
    sharing_friction_info: Optional[SharingFrictionInfo2] = None
    media_overlay_info: Optional[Any] = None
    media_preview: Optional[Optional[str]] = None
    owner: Optional[Owner2] = None
    is_video: Optional[bool] = None
    has_upcoming_event: Optional[bool] = None
    accessibility_caption: Optional[str] = None


class Edge6(BaseModel):
    node: Optional[Node6] = None


class EdgeSidecarToChildren(BaseModel):
    edges: Optional[List[Edge6]] = None


class DashInfo1(BaseModel):
    is_dash_eligible: Optional[bool] = None
    video_dash_manifest: Optional[Any] = None
    number_of_qualities: Optional[int] = None


class ClipsMusicAttributionInfo(BaseModel):
    artist_name: Optional[str] = None
    song_name: Optional[str] = None
    uses_original_audio: Optional[bool] = None
    should_mute_audio: Optional[bool] = None
    should_mute_audio_reason: Optional[str] = None
    audio_id: Optional[str] = None


class Node3(BaseModel):
    __typename: Optional[str] = None
    id: Optional[str] = None
    shortcode: Optional[str] = None
    dimensions: Optional[Dimensions1] = None
    display_url: Optional[str] = None
    edge_media_to_tagged_user: Optional[EdgeMediaToTaggedUser1] = None
    fact_check_overall_rating: Optional[Any] = None
    fact_check_information: Optional[Any] = None
    gating_info: Optional[Any] = None
    sharing_friction_info: Optional[SharingFrictionInfo1] = None
    media_overlay_info: Optional[Any] = None
    media_preview: Optional[Optional[str]] = None
    owner: Optional[Owner1] = None
    is_video: Optional[bool] = None
    has_upcoming_event: Optional[bool] = None
    accessibility_caption: Optional[Optional[str]] = None
    edge_media_to_caption: Optional[EdgeMediaToCaption1] = None
    edge_media_to_comment: Optional[EdgeMediaToComment1] = None
    comments_disabled: Optional[bool] = None
    taken_at_timestamp: Optional[int] = None
    edge_liked_by: Optional[EdgeLikedBy1] = None
    edge_media_preview_like: Optional[EdgeMediaPreviewLike1] = None
    location: Optional[Any] = None
    nft_asset_info: Optional[Any] = None
    thumbnail_src: Optional[str] = None
    thumbnail_resources: Optional[List[ThumbnailResource1]] = None
    coauthor_producers: Optional[List[CoauthorProducer1]] = None
    pinned_for_users: Optional[List] = None
    viewer_can_reshare: Optional[bool] = None
    edge_sidecar_to_children: Optional[EdgeSidecarToChildren] = None
    dash_info: Optional[DashInfo1] = None
    has_audio: Optional[bool] = None
    tracking_token: Optional[str] = None
    video_url: Optional[str] = None
    video_view_count: Optional[int] = None
    felix_profile_grid_crop: Optional[Any] = None
    product_type: Optional[str] = None
    clips_music_attribution_info: Optional[ClipsMusicAttributionInfo] = None


class Edge3(BaseModel):
    node: Optional[Node3] = None


class EdgeOwnerToTimelineMedia(BaseModel):
    count: Optional[int] = None
    page_info: Optional[PageInfo1] = None
    edges: Optional[List[Edge3]] = None


class PageInfo2(BaseModel):
    has_next_page: Optional[bool] = None
    end_cursor: Optional[Any] = None


class EdgeSavedMedia(BaseModel):
    count: Optional[int] = None
    page_info: Optional[PageInfo2] = None
    edges: Optional[List] = None


class PageInfo3(BaseModel):
    has_next_page: Optional[bool] = None
    end_cursor: Optional[Any] = None


class EdgeMediaCollections(BaseModel):
    count: Optional[int] = None
    page_info: Optional[PageInfo3] = None
    edges: Optional[List] = None


class Node8(BaseModel):
    id: Optional[str] = None
    full_name: Optional[str] = None
    is_private: Optional[bool] = None
    is_verified: Optional[bool] = None
    profile_pic_url: Optional[str] = None
    username: Optional[str] = None


class Edge8(BaseModel):
    node: Optional[Node8] = None


class EdgeRelatedProfiles(BaseModel):
    edges: Optional[List[Edge8]] = None


class User(BaseModel):
    ai_agent_type: Optional[Any] = None
    biography: Optional[str] = None
    bio_links: Optional[List[BioLink]] = None
    fb_profile_biolink: Optional[Any] = None
    biography_with_entities: Optional[BiographyWithEntities] = None
    blocked_by_viewer: Optional[bool] = None
    restricted_by_viewer: Optional[Any] = None
    country_block: Optional[bool] = None
    eimu_id: Optional[str] = None
    external_url: Optional[str] = None
    external_url_linkshimmed: Optional[str] = None
    edge_followed_by: Optional[EdgeFollowedBy] = None
    fbid: Optional[str] = None
    followed_by_viewer: Optional[bool] = None
    edge_follow: Optional[EdgeFollow] = None
    follows_viewer: Optional[bool] = None
    full_name: Optional[str] = None
    group_metadata: Optional[Any] = None
    has_ar_effects: Optional[bool] = None
    has_clips: Optional[bool] = None
    has_guides: Optional[bool] = None
    has_channel: Optional[bool] = None
    has_blocked_viewer: Optional[bool] = None
    highlight_reel_count: Optional[int] = None
    has_requested_viewer: Optional[bool] = None
    hide_like_and_view_counts: Optional[bool] = None
    id: Optional[str] = None
    is_business_account: Optional[bool] = None
    is_professional_account: Optional[bool] = None
    is_supervision_enabled: Optional[bool] = None
    is_guardian_of_viewer: Optional[bool] = None
    is_supervised_by_viewer: Optional[bool] = None
    is_supervised_user: Optional[bool] = None
    is_embeds_disabled: Optional[bool] = None
    is_joined_recently: Optional[bool] = None
    guardian_id: Optional[Any] = None
    business_address_json: Optional[str] = None
    business_contact_method: Optional[str] = None
    business_email: Optional[Any] = None
    business_phone_number: Optional[Any] = None
    business_category_name: Optional[Any] = None
    overall_category_name: Optional[Any] = None
    category_enum: Optional[Any] = None
    category_name: Optional[str] = None
    is_private: Optional[bool] = None
    is_verified: Optional[bool] = None
    is_verified_by_mv4b: Optional[bool] = None
    is_regulated_c18: Optional[bool] = None
    edge_mutual_followed_by: Optional[EdgeMutualFollowedBy] = None
    pinned_channels_list_count: Optional[int] = None
    profile_pic_url: Optional[str] = None
    profile_pic_url_hd: Optional[str] = None
    requested_by_viewer: Optional[bool] = None
    should_show_category: Optional[bool] = None
    should_show_public_contacts: Optional[bool] = None
    show_account_transparency_details: Optional[bool] = None
    remove_message_entrypoint: Optional[bool] = None
    transparency_label: Optional[Any] = None
    transparency_product: Optional[Any] = None
    username: Optional[str] = None
    connected_fb_page: Optional[Any] = None
    pronouns: Optional[List] = None
    edge_felix_video_timeline: Optional[EdgeFelixVideoTimeline] = None
    edge_owner_to_timeline_media: Optional[EdgeOwnerToTimelineMedia] = None
    edge_saved_media: Optional[EdgeSavedMedia] = None
    edge_media_collections: Optional[EdgeMediaCollections] = None
    edge_related_profiles: Optional[EdgeRelatedProfiles] = None


class Data(BaseModel):
    user: Optional[User] = None


class UserResponse(BaseModel):
    data: Optional[Data] = None
    status: Optional[str] = None

    def to_embed(self, ctx: Context) -> Embed:
        data = self.data.user
        embed = Embed(color=ctx.bot.color)
        badges = ""
        if data.is_verified == True:
            badges += "☑️"
        if data.is_private == True:
            badges += "🔒"
        embed.description = data.biography + badges
        embed.title = f"{data.full_name} (@{data.username})"
        embed.url = f"https://instagram.com/{data.username}"
        embed.add_field(name="Following", value=data.edge_follow.count, inline=True)
        embed.add_field(
            name="Followers", value=data.edge_followed_by.count, inline=True
        )
        embed.set_thumbnail(url=data.profile_pic_url)


class TikTokUser(BaseModel):
    username: str
    display: Optional[str] = ""
    followers: Optional[int] = 0
    following: Optional[int] = 0
    likes: Optional[int] = 0
    private: Optional[bool] = False
    verified: Optional[bool] = False
    bio: Optional[str] = ""
    avatar: Optional[str] = ""
    url: Optional[str] = None

    def to_embed(self, ctx: Context) -> Embed:
        embed = Embed(color=ctx.bot.color)
        embed.url = self.url
        badges = ""
        if self.verified == True:
            badges += "☑️"
        if self.private == True:
            badges += "🔒"
        embed.description = self.bio + badges
        embed.title = f"{self.display} (@{self.username})"
        embed.set_thumbnail(url=self.avatar)
        embed.add_field(name="Followers", value=self.followers, inline=True)
        embed.add_field(name="Following", value=self.following, inline=True)
        embed.add_field(name="Likes", value=self.likes, inline=True)
        return embed
